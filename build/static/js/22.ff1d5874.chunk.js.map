{"version":3,"sources":["pages/payment-request/payment-request.component.tsx"],"names":["PaymentRequestComponent","props","input","state","copied","copyAddressToClipboard","bind","address","amount","trim","length","Number","error","message","queryString","parse","this","location","search","description","mobileAppLink","stringify","undefined","getError","className","id","values","coinName","environment","blockchain","toUpperCase","value","size","ref","onClick","href","window","getSelection","selectAllChildren","selectInput","document","execCommand","removeAllRanges","setState","setTimeout","React","PureComponent"],"mappings":"sUAYqBA,E,kDAOnB,WAAYC,GAA8B,IAAD,8BACvC,cAAMA,IAPRC,WAMyC,IAJzCC,MAAa,CACXC,QAAQ,GAMR,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAHS,E,4CAMzC,SAASC,EAAiBC,GACxB,OAAI,OAACD,QAAD,IAACA,OAAD,EAACA,EAASE,OAAOC,QAIjBC,OAAOH,GAAU,EACZ,CAAEI,OAAO,EAAMC,QAAS,kBAG1B,CAAED,OAAO,GAPP,CAAEA,OAAO,EAAMC,QAAS,qB,oBAUnC,WAAuB,IAAD,OACpB,EAA8CC,IAAYC,MACxDC,KAAKf,MAAMgB,SAASC,QADdX,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAAQW,EAAzB,EAAyBA,YAInBC,EAAa,eAAWb,GAAX,OAChBC,GAAWW,EAAmB,IAAL,IADT,OAEhBL,IAAYO,UAAU,CACvBb,SACAW,YAAaA,QAAeG,KAG9B,EAA2BN,KAAKO,SAAShB,EAASC,GAA1CI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAEf,OACE,sBAAKW,UAAU,qBAAf,UACE,qBAAKA,UAAU,6BAAf,SACE,sBAAKA,UAAU,4BAAf,UACE,cAAC,IAAD,CAAkBC,GAAG,sCAEnBb,GACA,qBAAKY,UAAU,+BAAf,SACE,cAAC,IAAD,CACEC,GAAG,sCACHC,OAAQ,CACNC,SAAUC,IAAYC,WAAWF,SAASG,wBAOrDlB,EACC,qBAAKY,UAAU,aAAf,SAA6BX,IAE7B,sBAAKW,UAAU,2BAAf,WACIhB,EAAS,GAAKW,IACd,sBAAKK,UAAU,2BAAf,UACGhB,EAAS,GACR,sBAAKgB,UAAU,6BAAf,UACGhB,EADH,IACYoB,IAAYC,WAAWF,SAASG,iBAG7CX,GACC,sBAAKK,UAAU,kCAAf,UACE,cAAC,IAAD,CAAkBC,GAAG,mCAAoC,IACzD,wCAAQN,EAAR,gBAKR,cAAC,IAAD,CAAQY,MAAOxB,EAASyB,KAAM,MAE9B,sBAAKR,UAAU,qCAAf,UACE,qBACEA,UAAU,yCACVS,IAAK,SAACA,GAAD,OAA0B,EAAK/B,MAAQ+B,GAF9C,SAIG1B,IAGH,wBACEiB,UAAU,kDACVU,QAASlB,KAAKX,uBAFhB,SAIGW,KAAKb,MAAMC,OACV,cAAC,IAAD,CAAkBqB,GAAG,sCAErB,cAAC,IAAD,CAAkBA,GAAG,yCAK3B,mBACED,UAAU,sCACVW,KAAMf,EAFR,mD,yBAYV,WACGgB,OAAOC,eAA6BC,kBAAkBtB,KAAKd,S,oCAG9D,WAAwC,IAAD,OACrCc,KAAKuB,cAELC,SAASC,YAAY,QACpBL,OAAOC,eAA6BK,kBAErC1B,KAAK2B,SAAS,CACZvC,QAAQ,IAGVwC,YAAW,WACT,EAAKD,SAAS,CACZvC,QAAQ,MAET,S,GAhI8CyC,IAAMC","file":"static/js/22.ff1d5874.chunk.js","sourcesContent":["import QRCode from 'qrcode.react';\nimport queryString from 'query-string';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RouteComponentProps } from 'react-router';\n\nimport environment from '../../config/environment';\n\nimport './payment-request.scss';\n\ntype IPaymentRequestProps = RouteComponentProps<any>;\n\nexport default class PaymentRequestComponent extends React.PureComponent<IPaymentRequestProps> {\n  input!: HTMLDivElement;\n\n  state: any = {\n    copied: false,\n  };\n\n  constructor(props: IPaymentRequestProps) {\n    super(props);\n\n    this.copyAddressToClipboard = this.copyAddressToClipboard.bind(this);\n  }\n\n  getError(address: string, amount: string) {\n    if (!address?.trim().length) {\n      return { error: true, message: 'Invalid address' };\n    }\n\n    if (Number(amount) < 0) {\n      return { error: true, message: 'Invalid amount' };\n    }\n\n    return { error: false };\n  }\n\n  render(): JSX.Element {\n    const { address, amount, description }: any = queryString.parse(\n      this.props.location.search\n    );\n\n    const mobileAppLink = `ergo:${address}${\n      !amount && !description ? '' : '?'\n    }${queryString.stringify({\n      amount,\n      description: description || undefined,\n    })}`;\n\n    const { error, message } = this.getError(address, amount);\n\n    return (\n      <div className=\"bi-payment-request\">\n        <div className=\"bi-payment-request__header\">\n          <div className=\"bi-payment-request__title\">\n            <FormattedMessage id=\"components.payment-request.title\" />\n\n            {!error && (\n              <div className=\"bi-payment-request__subtitle\">\n                <FormattedMessage\n                  id=\"components.payment-request.subtitle\"\n                  values={{\n                    coinName: environment.blockchain.coinName.toUpperCase(),\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        {error ? (\n          <div className=\"text-error\">{message}</div>\n        ) : (\n          <div className=\"bi-payment-request__body\">\n            {(amount > 0 || description) && (\n              <div className=\"bi-payment-request__info\">\n                {amount > 0 && (\n                  <div className=\"bi-payment-request__amount\">\n                    {amount} {environment.blockchain.coinName.toUpperCase()}\n                  </div>\n                )}\n                {description && (\n                  <div className=\"bi-payment-request__description\">\n                    <FormattedMessage id=\"components.payment-request.for\" />{' '}\n                    <cite>«{description}»</cite>\n                  </div>\n                )}\n              </div>\n            )}\n            <QRCode value={address} size={146} />\n\n            <div className=\"bi-payment-request__address g-flex\">\n              <div\n                className=\"bi-payment-request__input g-flex__item\"\n                ref={(ref: HTMLDivElement) => (this.input = ref)}\n              >\n                {address}\n              </div>\n\n              <button\n                className=\"bi-payment-request__btn-copy g-flex__item-fixed\"\n                onClick={this.copyAddressToClipboard}\n              >\n                {this.state.copied ? (\n                  <FormattedMessage id=\"components.payment-request.copied\" />\n                ) : (\n                  <FormattedMessage id=\"components.payment-request.copy\" />\n                )}\n              </button>\n            </div>\n\n            <a\n              className=\"bi-payment-request__mobile-app-link\"\n              href={mobileAppLink}\n            >\n              Click here to open wallet app\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private selectInput(): void {\n    (window.getSelection() as Selection).selectAllChildren(this.input);\n  }\n\n  private copyAddressToClipboard(): void {\n    this.selectInput();\n\n    document.execCommand('copy');\n    (window.getSelection() as Selection).removeAllRanges();\n\n    this.setState({\n      copied: true,\n    });\n\n    setTimeout(() => {\n      this.setState({\n        copied: false,\n      });\n    }, 1000);\n  }\n}\n"],"sourceRoot":""}